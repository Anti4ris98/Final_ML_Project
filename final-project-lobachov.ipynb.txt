{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":83793,"databundleVersionId":9336896,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport timeit\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nimport category_encoders as ce\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn import tree\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report, roc_auc_score\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-22T19:46:59.607265Z","iopub.execute_input":"2024-08-22T19:46:59.607963Z","iopub.status.idle":"2024-08-22T19:46:59.621281Z","shell.execute_reply.started":"2024-08-22T19:46:59.607929Z","shell.execute_reply":"2024-08-22T19:46:59.620068Z"},"trusted":true},"execution_count":283,"outputs":[{"name":"stdout","text":"/kaggle/input/ml-fundamentals-and-applications-2024-08/final_proj_data.csv\n/kaggle/input/ml-fundamentals-and-applications-2024-08/final_proj_test.csv\n/kaggle/input/ml-fundamentals-and-applications-2024-08/final_proj_sample_submission.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"train_data = pd.read_csv('/kaggle/input/ml-fundamentals-and-applications-2024-08/final_proj_data.csv')\ntest_data = pd.read_csv('/kaggle/input/ml-fundamentals-and-applications-2024-08/final_proj_test.csv')\ntarget = train_data.pop('y')","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:46:59.754249Z","iopub.execute_input":"2024-08-22T19:46:59.754627Z","iopub.status.idle":"2024-08-22T19:47:00.081266Z","shell.execute_reply.started":"2024-08-22T19:46:59.754598Z","shell.execute_reply":"2024-08-22T19:47:00.080119Z"},"trusted":true},"execution_count":284,"outputs":[]},{"cell_type":"code","source":"#%% Прибираємо ознаки в яких багато пропусків\ntrashold = 0.5\ntrain_data = train_data.dropna(thresh=int(train_data.shape[0]*trashold), axis=1)\ntest_data = test_data.dropna(thresh=int(test_data.shape[0]*trashold), axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:47:00.083392Z","iopub.execute_input":"2024-08-22T19:47:00.083764Z","iopub.status.idle":"2024-08-22T19:47:00.153663Z","shell.execute_reply.started":"2024-08-22T19:47:00.083731Z","shell.execute_reply":"2024-08-22T19:47:00.152464Z"},"trusted":true},"execution_count":285,"outputs":[]},{"cell_type":"code","source":"#%% Розбивка на категорійні та номерні ознаки\n\ndata_num_train = train_data.select_dtypes(include=np.number)\ndata_cat_train = train_data.select_dtypes(include='object')\n\ndata_num_test = test_data.select_dtypes(include=np.number)\ndata_cat_test = test_data.select_dtypes(include='object')","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:47:00.155612Z","iopub.execute_input":"2024-08-22T19:47:00.155995Z","iopub.status.idle":"2024-08-22T19:47:00.174388Z","shell.execute_reply.started":"2024-08-22T19:47:00.155962Z","shell.execute_reply":"2024-08-22T19:47:00.173409Z"},"trusted":true},"execution_count":286,"outputs":[]},{"cell_type":"code","source":"#%% Відновлення відсутніх значень\nnum_imputer = SimpleImputer(strategy='most_frequent').set_output(transform='pandas')\n\ndata_num_train = num_imputer.fit_transform(data_num_train)\ndata_num_test = num_imputer.transform(data_num_test)\n\ncat_imputer = SimpleImputer(strategy='most_frequent').set_output(transform='pandas')\n\ndata_cat_train = cat_imputer.fit_transform(data_cat_train)\ndata_cat_test = cat_imputer.transform(data_cat_test)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:47:00.252587Z","iopub.execute_input":"2024-08-22T19:47:00.253034Z","iopub.status.idle":"2024-08-22T19:47:00.406376Z","shell.execute_reply.started":"2024-08-22T19:47:00.252996Z","shell.execute_reply":"2024-08-22T19:47:00.405340Z"},"trusted":true},"execution_count":287,"outputs":[]},{"cell_type":"code","source":"label_encoder = LabelEncoder()\ndata_cat_train = data_cat_train.apply(label_encoder.fit_transform)\ndata_cat_test = data_cat_test.apply(label_encoder.fit_transform)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:47:00.408451Z","iopub.execute_input":"2024-08-22T19:47:00.409371Z","iopub.status.idle":"2024-08-22T19:47:00.630641Z","shell.execute_reply.started":"2024-08-22T19:47:00.409324Z","shell.execute_reply":"2024-08-22T19:47:00.629579Z"},"trusted":true},"execution_count":288,"outputs":[]},{"cell_type":"code","source":"X_train_concat = pd.concat([pd.DataFrame(data_num_train), data_num_train], axis=1).values\nX_test_concat = pd.concat([pd.DataFrame(data_num_test), data_num_test], axis=1).values","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:47:00.632734Z","iopub.execute_input":"2024-08-22T19:47:00.633170Z","iopub.status.idle":"2024-08-22T19:47:00.643410Z","shell.execute_reply.started":"2024-08-22T19:47:00.633134Z","shell.execute_reply":"2024-08-22T19:47:00.642207Z"},"trusted":true},"execution_count":289,"outputs":[]},{"cell_type":"code","source":"#%% Нормалізація змінних\nscaler = StandardScaler().set_output(transform='pandas')\n\nX_train = scaler.fit_transform(X_train_concat)\nX_test = scaler.transform(X_test_concat)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:47:00.698346Z","iopub.execute_input":"2024-08-22T19:47:00.698745Z","iopub.status.idle":"2024-08-22T19:47:00.714542Z","shell.execute_reply.started":"2024-08-22T19:47:00.698713Z","shell.execute_reply":"2024-08-22T19:47:00.713248Z"},"trusted":true},"execution_count":290,"outputs":[]},{"cell_type":"code","source":"# %%\nsm = SMOTE(random_state=42, k_neighbors=5)\n\nX_res, y_res = sm.fit_resample(X_train, target)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:47:00.848271Z","iopub.execute_input":"2024-08-22T19:47:00.848676Z","iopub.status.idle":"2024-08-22T19:47:00.916606Z","shell.execute_reply.started":"2024-08-22T19:47:00.848646Z","shell.execute_reply":"2024-08-22T19:47:00.915613Z"},"trusted":true},"execution_count":291,"outputs":[]},{"cell_type":"code","source":"sns.countplot(x=target)\nplt.title(\"Розподіл цільової змінної\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:47:01.027322Z","iopub.execute_input":"2024-08-22T19:47:01.027707Z","iopub.status.idle":"2024-08-22T19:47:01.191381Z","shell.execute_reply.started":"2024-08-22T19:47:01.027677Z","shell.execute_reply":"2024-08-22T19:47:01.190174Z"},"trusted":true},"execution_count":292,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import classification_report, roc_auc_score\n\n# Налаштування гіперпараметрів\nparam_grid = {\n    'n_estimators': [50, 100, 200],\n    'learning_rate': [0.001, 0.01, 0.1],\n    'max_depth': [3, 5, 7],\n    'subsample': [0.8, 0.9, 1.0]\n}\n\n# Ініціалізація GBM\ngbm = GradientBoostingClassifier(random_state=42)\n\n# Ініціалізація GridSearchCV\ngrid_search = GridSearchCV(estimator=gbm, param_grid=param_grid, cv=5, scoring='accuracy', n_jobs=-1)\n\n# Навчання моделі\ngrid_search.fit(X_res, y_res)\n\n# Отримання найкращих параметрів та моделі\nbest_params = grid_search.best_params_\nbest_model = grid_search.best_estimator_\n\nprint(f\"Best Parameters: {best_params}\")\n\n# Оцінка моделі\ny_pred = best_model.predict(X_test)\nprint(\"ROC AUC Score:\", roc_auc_score(target, y_pred))\nprint(classification_report(target, y_pred))\n\n# Створення файлу з результатами\nsubmission = pd.DataFrame({\n    'index': test_data.index,\n    'y_pred': y_pred\n})\nsubmission.to_csv('submission.csv', index=False)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:47:13.308714Z","iopub.execute_input":"2024-08-22T19:47:13.309172Z","iopub.status.idle":"2024-08-22T21:21:24.287937Z","shell.execute_reply.started":"2024-08-22T19:47:13.309123Z","shell.execute_reply":"2024-08-22T21:21:24.285648Z"},"trusted":true},"execution_count":294,"outputs":[{"name":"stdout","text":"Best Parameters: {'learning_rate': 0.1, 'max_depth': 7, 'n_estimators': 100, 'subsample': 1.0}\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[294], line 30\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[38;5;66;03m# Оцінка моделі\u001b[39;00m\n\u001b[1;32m     29\u001b[0m y_pred \u001b[38;5;241m=\u001b[39m best_model\u001b[38;5;241m.\u001b[39mpredict(X_test)\n\u001b[0;32m---> 30\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mROC AUC Score:\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[43mroc_auc_score\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtarget\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_pred\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m     31\u001b[0m \u001b[38;5;28mprint\u001b[39m(classification_report(target, y_pred))\n\u001b[1;32m     33\u001b[0m \u001b[38;5;66;03m# Створення файлу з результатами\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py:572\u001b[0m, in \u001b[0;36mroc_auc_score\u001b[0;34m(y_true, y_score, average, sample_weight, max_fpr, multi_class, labels)\u001b[0m\n\u001b[1;32m    570\u001b[0m     labels \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39munique(y_true)\n\u001b[1;32m    571\u001b[0m     y_true \u001b[38;5;241m=\u001b[39m label_binarize(y_true, classes\u001b[38;5;241m=\u001b[39mlabels)[:, \u001b[38;5;241m0\u001b[39m]\n\u001b[0;32m--> 572\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_average_binary_score\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    573\u001b[0m \u001b[43m        \u001b[49m\u001b[43mpartial\u001b[49m\u001b[43m(\u001b[49m\u001b[43m_binary_roc_auc_score\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmax_fpr\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmax_fpr\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    574\u001b[0m \u001b[43m        \u001b[49m\u001b[43my_true\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    575\u001b[0m \u001b[43m        \u001b[49m\u001b[43my_score\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    576\u001b[0m \u001b[43m        \u001b[49m\u001b[43maverage\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    577\u001b[0m \u001b[43m        \u001b[49m\u001b[43msample_weight\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msample_weight\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    578\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    579\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:  \u001b[38;5;66;03m# multilabel-indicator\u001b[39;00m\n\u001b[1;32m    580\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m _average_binary_score(\n\u001b[1;32m    581\u001b[0m         partial(_binary_roc_auc_score, max_fpr\u001b[38;5;241m=\u001b[39mmax_fpr),\n\u001b[1;32m    582\u001b[0m         y_true,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    585\u001b[0m         sample_weight\u001b[38;5;241m=\u001b[39msample_weight,\n\u001b[1;32m    586\u001b[0m     )\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_base.py:75\u001b[0m, in \u001b[0;36m_average_binary_score\u001b[0;34m(binary_metric, y_true, y_score, average, sample_weight)\u001b[0m\n\u001b[1;32m     72\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{0}\u001b[39;00m\u001b[38;5;124m format is not supported\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(y_type))\n\u001b[1;32m     74\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m y_type \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbinary\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[0;32m---> 75\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mbinary_metric\u001b[49m\u001b[43m(\u001b[49m\u001b[43my_true\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_score\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msample_weight\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msample_weight\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     77\u001b[0m check_consistent_length(y_true, y_score, sample_weight)\n\u001b[1;32m     78\u001b[0m y_true \u001b[38;5;241m=\u001b[39m check_array(y_true)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py:344\u001b[0m, in \u001b[0;36m_binary_roc_auc_score\u001b[0;34m(y_true, y_score, sample_weight, max_fpr)\u001b[0m\n\u001b[1;32m    338\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(np\u001b[38;5;241m.\u001b[39munique(y_true)) \u001b[38;5;241m!=\u001b[39m \u001b[38;5;241m2\u001b[39m:\n\u001b[1;32m    339\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    340\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mOnly one class present in y_true. ROC AUC score \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    341\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mis not defined in that case.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    342\u001b[0m     )\n\u001b[0;32m--> 344\u001b[0m fpr, tpr, _ \u001b[38;5;241m=\u001b[39m \u001b[43mroc_curve\u001b[49m\u001b[43m(\u001b[49m\u001b[43my_true\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_score\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msample_weight\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msample_weight\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    345\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m max_fpr \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mor\u001b[39;00m max_fpr \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m    346\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m auc(fpr, tpr)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py:992\u001b[0m, in \u001b[0;36mroc_curve\u001b[0;34m(y_true, y_score, pos_label, sample_weight, drop_intermediate)\u001b[0m\n\u001b[1;32m    904\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mroc_curve\u001b[39m(\n\u001b[1;32m    905\u001b[0m     y_true, y_score, \u001b[38;5;241m*\u001b[39m, pos_label\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, sample_weight\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, drop_intermediate\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[1;32m    906\u001b[0m ):\n\u001b[1;32m    907\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"Compute Receiver operating characteristic (ROC).\u001b[39;00m\n\u001b[1;32m    908\u001b[0m \n\u001b[1;32m    909\u001b[0m \u001b[38;5;124;03m    Note: this implementation is restricted to the binary classification task.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    990\u001b[0m \u001b[38;5;124;03m    array([1.8 , 0.8 , 0.4 , 0.35, 0.1 ])\u001b[39;00m\n\u001b[1;32m    991\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 992\u001b[0m     fps, tps, thresholds \u001b[38;5;241m=\u001b[39m \u001b[43m_binary_clf_curve\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    993\u001b[0m \u001b[43m        \u001b[49m\u001b[43my_true\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_score\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpos_label\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpos_label\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msample_weight\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msample_weight\u001b[49m\n\u001b[1;32m    994\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    996\u001b[0m     \u001b[38;5;66;03m# Attempt to drop thresholds corresponding to points in between and\u001b[39;00m\n\u001b[1;32m    997\u001b[0m     \u001b[38;5;66;03m# collinear with other points. These are always suboptimal and do not\u001b[39;00m\n\u001b[1;32m    998\u001b[0m     \u001b[38;5;66;03m# appear on a plotted ROC curve (and thus do not affect the AUC).\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   1003\u001b[0m     \u001b[38;5;66;03m# but does not drop more complicated cases like fps = [1, 3, 7],\u001b[39;00m\n\u001b[1;32m   1004\u001b[0m     \u001b[38;5;66;03m# tps = [1, 2, 4]; there is no harm in keeping too many thresholds.\u001b[39;00m\n\u001b[1;32m   1005\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m drop_intermediate \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(fps) \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m2\u001b[39m:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/metrics/_ranking.py:751\u001b[0m, in \u001b[0;36m_binary_clf_curve\u001b[0;34m(y_true, y_score, pos_label, sample_weight)\u001b[0m\n\u001b[1;32m    748\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (y_type \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbinary\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mor\u001b[39;00m (y_type \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmulticlass\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m pos_label \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m)):\n\u001b[1;32m    749\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{0}\u001b[39;00m\u001b[38;5;124m format is not supported\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(y_type))\n\u001b[0;32m--> 751\u001b[0m \u001b[43mcheck_consistent_length\u001b[49m\u001b[43m(\u001b[49m\u001b[43my_true\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_score\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msample_weight\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    752\u001b[0m y_true \u001b[38;5;241m=\u001b[39m column_or_1d(y_true)\n\u001b[1;32m    753\u001b[0m y_score \u001b[38;5;241m=\u001b[39m column_or_1d(y_score)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/sklearn/utils/validation.py:397\u001b[0m, in \u001b[0;36mcheck_consistent_length\u001b[0;34m(*arrays)\u001b[0m\n\u001b[1;32m    395\u001b[0m uniques \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39munique(lengths)\n\u001b[1;32m    396\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(uniques) \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m--> 397\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    398\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFound input variables with inconsistent numbers of samples: \u001b[39m\u001b[38;5;132;01m%r\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    399\u001b[0m         \u001b[38;5;241m%\u001b[39m [\u001b[38;5;28mint\u001b[39m(l) \u001b[38;5;28;01mfor\u001b[39;00m l \u001b[38;5;129;01min\u001b[39;00m lengths]\n\u001b[1;32m    400\u001b[0m     )\n","\u001b[0;31mValueError\u001b[0m: Found input variables with inconsistent numbers of samples: [10000, 2500]"],"ename":"ValueError","evalue":"Found input variables with inconsistent numbers of samples: [10000, 2500]","output_type":"error"}]},{"cell_type":"code","source":"gbm = GradientBoostingClassifier(random_state=42)\ngbm.fit(X_res, y_res)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:47:05.227959Z","iopub.status.idle":"2024-08-22T19:47:05.228444Z","shell.execute_reply.started":"2024-08-22T19:47:05.228214Z","shell.execute_reply":"2024-08-22T19:47:05.228242Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# clf = (tree.DecisionTreeClassifier(\n#     random_state=42)\n#     .fit(X_res, y_res))\n\ny_pred = gbm.predict(X_test)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:42:58.543627Z","iopub.execute_input":"2024-08-22T19:42:58.543902Z","iopub.status.idle":"2024-08-22T19:42:58.557501Z","shell.execute_reply.started":"2024-08-22T19:42:58.543877Z","shell.execute_reply":"2024-08-22T19:42:58.556678Z"},"trusted":true},"execution_count":280,"outputs":[]},{"cell_type":"code","source":"submission = pd.DataFrame({\n    'index': X_test.index,\n    'y_pred': y_pred})\n\nsubmission.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T19:42:58.559017Z","iopub.execute_input":"2024-08-22T19:42:58.559688Z","iopub.status.idle":"2024-08-22T19:42:58.571283Z","shell.execute_reply.started":"2024-08-22T19:42:58.559651Z","shell.execute_reply":"2024-08-22T19:42:58.570239Z"},"trusted":true},"execution_count":281,"outputs":[]}]}